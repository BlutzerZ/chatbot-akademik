from sqlalchemy.orm import Session
from app.conversation.service import ConversationService
from app.feedback import model
from app.conversation.model import (
    Conversation as ModelConversation,
    Message as ModelMessage,
    RoleEnum,
)


class FeedbackService:
    def __init__(self, session: Session):
        self.session = session
        self.cs = ConversationService(session)

    def get_all_feedback(self, jwtData) -> list[Exception, model.Feedback]:
        try:
            feedbacks = (
                self.session.query(model.Feedback)
                .order_by(model.Feedback.created_at.desc())
                .all()
            )
            return None, feedbacks

        except Exception as e:
            return e, None

    def get_feedback_by_id(
        self, jwtData, feedback_id
    ) -> list[Exception, model.Feedback]:
        try:
            feedback = (
                self.session.query(model.Feedback).filter_by(id=feedback_id).first()
            )
            return None, feedback
        except Exception as e:
            return e, None

    def feedback_by_message(
        self, jwtData, message_id, data
    ) -> list[Exception, model.Feedback]:
        # Get Message
        e, message = self.cs.get_message_by_id(jwtData, message_id)

        if e:
            return e, None

        if not message:
            errorMsg = "Error maybe message not found or message not generated by bot"
            return Exception(errorMsg), None

        # Get Feedback Data
        try:
            feedback = (
                self.session.query(model.Feedback)
                .filter_by(bot_message_id=message.id)
                .first()  # or .all() depending on what you need
            )
        except Exception as e:
            print(e)
            return f"Error Find Data | {str(e)}", None

        if feedback:  # Feedback is found
            try:
                feedback.score = data.score
                feedback.content = data.content
                self.session.add(feedback)
                self.session.commit()
                self.session.refresh(feedback)
            except Exception as e:
                self.session.rollback()
                return f"Error Update Data | {str(e)}", None

        else:  # Feedback not found, create it
            try:

                previous_message = (
                    self.session.query(ModelMessage.id)
                    .join(
                        ModelConversation,
                        ModelMessage.conversation_id == ModelConversation.id,
                    )
                    .filter(
                        ModelMessage.conversation_id == message.conversation_id,
                        ModelMessage.id < message.id,
                        ModelMessage.role == RoleEnum.user,
                        ModelConversation.user_id == jwtData["id"],
                    )
                    .order_by(ModelMessage.id.desc())
                    .first()
                )
                feedback = model.Feedback(
                    bot_message_id=message_id,
                    user_message_id=previous_message.id,
                    score=data.score,
                    content=data.content,
                )
                self.session.add(feedback)
                self.session.commit()
                self.session.refresh(feedback)
            except Exception as e:
                self.session.rollback()
                return f"Error Create Data | {str(e)}", None

        return None, feedback
